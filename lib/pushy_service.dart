import 'dart:convert';
import 'dart:math';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class PushyService {
  static const String pushyApiKey =
      '71c1296829765c1250f2ff61f49225c393913d6a131e63719ff4726f3d0a5a70';

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pushy (–±–µ–∑ SDK - –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP –ø–æ–¥—Ö–æ–¥)
  static Future<String?> initializePushy(String userId) async {
    try {
      print('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pushy –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
      final prefs = await SharedPreferences.getInstance();
      String? deviceToken = prefs.getString('pushy_token_$userId');

      if (deviceToken == null) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
        deviceToken = _generateDeviceToken(userId); // –ü–µ—Ä–µ–¥–∞–µ–º userId
        await prefs.setString('pushy_token_$userId', deviceToken);
        print('‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: $deviceToken');
      } else {
        print('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω: $deviceToken');
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ Supabase
      await _savePushyTokenToSupabase(userId, deviceToken);

      return deviceToken;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Pushy: $e');
      return null;
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
  static String _generateDeviceToken(String userId) {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä userId
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    final random = Random().nextInt(1000000);
    return 'pushy_${userId}_${timestamp}_${random}';
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ Supabase
  static Future<void> _savePushyTokenToSupabase(
      String userId, String token) async {
    try {
      final supabase = Supabase.instance.client;
      await supabase.from('user_tokens').upsert({
        'user_id': userId,
        'pushy_token': token,
        'updated_at': DateTime.now().toIso8601String(),
      });
      print('‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Supabase');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ Supabase: $e');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  static void handlePushNotification(Map<String, dynamic> data) {
    print('üì® –ü–æ–ª—É—á–µ–Ω–æ –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: $data');

    String title = data['title'] ?? '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ';
    String message = data['message'] ?? '–£ –≤–∞—Å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ';

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    print('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: $title - $message');
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  static Future<bool> sendPushNotification({
    required String toUserId,
    required String fromUserId,
    required String fromUserName,
    required String messageText,
  }) async {
    try {
      print('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: $toUserId');

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–∑ Supabase
      final supabase = Supabase.instance.client;
      final response = await supabase
          .from('user_tokens')
          .select('pushy_token')
          .eq('user_id', toUserId);

      if (response.isEmpty) {
        print('‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $toUserId –Ω–µ—Ç pushy —Ç–æ–∫–µ–Ω–∞');
        return false;
      }

      String recipientToken = response.first['pushy_token'];
      print('üì± –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è: $recipientToken');

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      String notificationBody = messageText.length > 50
          ? '${messageText.substring(0, 50)}...'
          : messageText;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—à —á–µ—Ä–µ–∑ Pushy API
      final pushResponse = await http.post(
        Uri.parse('https://api.pushy.me/push?api_key=$pushyApiKey'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode({
          'to': recipientToken,
          'data': {
            'title': 'üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
            'message': '$fromUserName: $messageText',
            'from_user_id': fromUserId,
            'type': 'new_message'
          },
          'notification': {
            'title': 'üí¨ $fromUserName',
            'body': notificationBody,
            'badge': 1,
            'sound': 'default'
          },
          'time_to_live': 3600, // 1 —á–∞—Å
        }),
      );

      print('üì§ –û—Ç–≤–µ—Ç –æ—Ç Pushy API: ${pushResponse.statusCode}');

      if (pushResponse.statusCode == 200) {
        print('‚úÖ –ü—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        return true;
      } else {
        print(
            '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—É—à–∞: ${pushResponse.statusCode} - ${pushResponse.body}');
        return false;
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
      return false;
    }
  }
}
