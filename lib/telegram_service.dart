import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:supabase_flutter/supabase_flutter.dart';
import 'dart:math';

class TelegramService {
  // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (—Ç–æ—Ç –∂–µ, —á—Ç–æ –≤ Render)
  static const String botToken =
      '7874269168:AAHEXfWcrscD0JVN1SPIjt5k8Du-ScRxwmc';

  // –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£ - username –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
  static const String botUsername =
      'my_chat_notifications_bot'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π username

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram
  static Future<bool> sendTelegramNotification({
    required String toUserId,
    required String fromUserId,
    required String fromUserName,
    required String messageText,
  }) async {
    try {
      print('üì± –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: $toUserId');

      // –ü–æ–ª—É—á–∞–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
      final supabase = Supabase.instance.client;
      final userResponse = await supabase
          .from('users')
          .select('telegram_chat_id, name')
          .eq('id', toUserId)
          .single();

      if (userResponse['telegram_chat_id'] == null) {
        print('‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $toUserId –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ Telegram');
        return false;
      }

      String chatId = userResponse['telegram_chat_id'];
      String userName = userResponse['name'] ?? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

      print('üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram chat_id: $chatId');

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      String telegramMessage = '''
üí¨ *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ*

*–û—Ç:* $fromUserName
*–î–ª—è:* $userName

*–°–æ–æ–±—â–µ–Ω–∏–µ:*
$messageText

---
_–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –ú–æ–π –ß–∞—Ç App_
''';

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram API
      final response = await http.post(
        Uri.parse('https://api.telegram.org/bot$botToken/sendMessage'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode({
          'chat_id': chatId,
          'text': telegramMessage,
          'parse_mode': 'Markdown',
          'reply_markup': {
            'inline_keyboard': [
              [
                {
                  'text': 'üíå –û—Ç–≤–µ—Ç–∏—Ç—å',
                  'url':
                      'https://t.me/$botUsername' // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É botUsername
                }
              ]
            ]
          }
        }),
      );

      print('üì± –û—Ç–≤–µ—Ç –æ—Ç Telegram API: ${response.statusCode}');

      if (response.statusCode == 200) {
        print('‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
        return true;
      } else {
        final errorData = json.decode(response.body);
        print('‚ùå –û—à–∏–±–∫–∞ Telegram: ${errorData['description']}');
        return false;
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
      return false;
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
  static String generateBindCode() {
    final random = Random();
    return 'CHAT${random.nextInt(9000) + 1000}'; // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CHAT1234
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –≤ –±–∞–∑—É
  static Future<void> saveBindCode(String userId, String code) async {
    try {
      final supabase = Supabase.instance.client;
      await supabase.from('telegram_bind_codes').upsert({
        'user_id': userId,
        'bind_code': code,
        'created_at': DateTime.now().toIso8601String(),
        'expires_at':
            DateTime.now().add(Duration(minutes: 10)).toIso8601String(),
      });
      print('‚úÖ –ö–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $code –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –ø—Ä–∏–≤—è–∑–∫–∏: $e');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ user_id –ø–æ –∫–æ–¥—É –ø—Ä–∏–≤—è–∑–∫–∏
  static Future<String?> getUserIdByBindCode(String code) async {
    try {
      final supabase = Supabase.instance.client;
      final response = await supabase
          .from('telegram_bind_codes')
          .select('user_id')
          .eq('bind_code', code)
          .gt('expires_at', DateTime.now().toIso8601String())
          .single();

      return response['user_id'];
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è user_id –ø–æ –∫–æ–¥—É: $e');
      return null;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–≤—è–∑–∫–∏
  static Future<Map<String, dynamic>> getTelegramStatus(String userId) async {
    try {
      final supabase = Supabase.instance.client;
      final response = await supabase
          .from('users')
          .select('telegram_chat_id, name')
          .eq('id', userId)
          .single();

      final bool isBound = response['telegram_chat_id'] != null;

      return {
        'isBound': isBound,
        'chatId': response['telegram_chat_id'],
        'userName': response['name'],
      };
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Telegram: $e');
      return {'isBound': false, 'chatId': null, 'userName': null};
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  static Future<bool> sendTestMessage(String chatId) async {
    try {
      final response = await http.post(
        Uri.parse('https://api.telegram.org/bot$botToken/sendMessage'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode({
          'chat_id': chatId,
          'text':
              '‚úÖ *–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*\n\n–í–∞—à Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —á–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.',
          'parse_mode': 'Markdown',
        }),
      );

      return response.statusCode == 200;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
      return false;
    }
  }
}
